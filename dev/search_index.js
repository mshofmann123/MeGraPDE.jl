var documenterSearchIndex = {"docs":
[{"location":"spectral_galerkin/#Spectral-Galerkin-Method","page":"Spectral Galerkin Method","title":"Spectral Galerkin Method","text":"","category":"section"},{"location":"spectral_galerkin/#MeGraPDE.projection_coefficients","page":"Spectral Galerkin Method","title":"MeGraPDE.projection_coefficients","text":"projection_coefficients(Γ::MetricGraph, σ::QuantumGraphEigen, u::Vector{Function})\n\nCompute projection coefficients 'coefs' of orthogonal projection of 'u' with standard QuadGK quadrature.\n\n\n\n\n\nprojection_coefficients(Γ::EquilateralMetricGraph, σ::QuantumGraphEigen, u::Vector{Function})\n\nEquilateral version.\n\n\n\n\n\n","category":"function"},{"location":"spectral_galerkin/#MeGraPDE.projection_coefficients_filon","page":"Spectral Galerkin Method","title":"MeGraPDE.projection_coefficients_filon","text":"projection_coefficients_filon(Γ::EquilateralMetricGraph, σ::QuantumGraphEigen, u::Vector{Function}, quad_nodes::Int)\n\nCompute projection coefficients of 'u' on 'Γ' for eigenfunction in 'σ' with 'quad_nodes' quadrature nodes.\n\nUses (matrix-free) Filon-Quadrature as described in [W], Section 4.3.2.\n\n\n\n\n\n","category":"function"},{"location":"spectral_galerkin/#MeGraPDE.spectral_solution","page":"Spectral Galerkin Method","title":"MeGraPDE.spectral_solution","text":"spectral_solution(Γ::AbstractMetricGraph, σ::QuantumGraphEigen, coef::Vector)\n\nExplicitly construct spectral solution u_Q on 'Γ' from eigenbasis 'σ' and coefficents 'coef'.\n\n\n\n\n\n","category":"function"},{"location":"spectral_galerkin/#MeGraPDE.spectral_solver","page":"Spectral Galerkin Method","title":"MeGraPDE.spectral_solver","text":"spectral_solver(TP::EllipticTestProblem, K::Int; filon=false)\n\nCompute coefficents of the spectral Galerkin solution of 'TP' with eigenfunction basis of size 'K'.\n\nIf filon=true, the more economic filon-quadrature is applied instead of QuadGK.\n\n\n\n\n\nspectral_solver(TP::TPGeneralizedHeat, T::Number, K::Int; filon=false)\n\nCompute coefficents of the spectral Galerkin solution of 'TP' at time 'T' with eigenfunction basis of size 'K'.\n\nIf filon=true, the more economic filon-quadrature is applied instead of QuadGK.\n\n\n\n\n\n","category":"function"},{"location":"gettingstarted/theory/#Background","page":"Background","title":"Background","text":"","category":"section"},{"location":"gettingstarted/theory/","page":"Background","title":"Background","text":"In preparation, see , chapter xx for the moment.","category":"page"},{"location":"testproblems/#Test-Problems","page":"Test Problems","title":"Test Problems","text":"","category":"section"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"Different type of test problems of abstract type TestProblem can be constructed.","category":"page"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"The following types are available:","category":"page"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"EllipticTestProblem\nTPGeneralizedHeat\nTPReactionDiffusion","category":"page"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"Depending on the specific problem, a right-hand side, reaction-term and/or initial conditions must be set. If available, the exact solution and its derivative can be indicated. Otherwise, 'Nothing' must be specified.","category":"page"},{"location":"testproblems/#Elliptic-Test-Problems","page":"Test Problems","title":"Elliptic Test Problems","text":"","category":"section"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"The elliptic equation","category":"page"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"mathcalH( u(x)) + nu u(x) = f(x)","category":"page"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"is represented by the TestProblem type","category":"page"},{"location":"testproblems/#MeGraPDE.EllipticTestProblem","page":"Test Problems","title":"MeGraPDE.EllipticTestProblem","text":"Elliptic Test Problem\n\npot: Potential\nΓ: Metric Graph\nrhs: Right-hand side\nu: Exact solution\nu_deriv: Derivative of exact solution\n\n\n\n\n\n","category":"type"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"The following exemplary test problems are predefined:","category":"page"},{"location":"testproblems/#MeGraPDE.TestProblem242","page":"Test Problems","title":"MeGraPDE.TestProblem242","text":"TestProblem242\n\nElliptic test problem on 5-star graph with equilateral edge length π+π/2.\n\n\n\n\n\n","category":"constant"},{"location":"testproblems/#MeGraPDE.TestProblem243","page":"Test Problems","title":"MeGraPDE.TestProblem243","text":"TestProblem243\n\nElliptic test problem diamond graph with equilateral edge length 2π.\n\n\n\n\n\n","category":"constant"},{"location":"testproblems/#MeGraPDE.TestProblem711","page":"Test Problems","title":"MeGraPDE.TestProblem711","text":"TestProblem711\n\nElliptic test problem on star graph.\n\n\n\n\n\n","category":"constant"},{"location":"testproblems/#Parabolic-Test-Problems","page":"Test Problems","title":"Parabolic Test Problems","text":"","category":"section"},{"location":"testproblems/#Generalized-Heat-Equation","page":"Test Problems","title":"Generalized Heat Equation","text":"","category":"section"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"The generalized heat equation","category":"page"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"fracpartial upartial t(xt) + mathcalH( u(xt) = f(xt))","category":"page"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"on Gamma subject to Neumann-Kirchhoff conditions and initial condition u^0 is represented by the TestProblem type","category":"page"},{"location":"testproblems/#MeGraPDE.TPGeneralizedHeat","page":"Test Problems","title":"MeGraPDE.TPGeneralizedHeat","text":"Test Problem related to Generalized Heat Equation on Γ.\n\nΓ: Metric Graph\nu0: Initial Condition\nrhs: right-hand side\nu: Exact solution\nu_deriv: Derivative of exact solution\n\n\n\n\n\n","category":"type"},{"location":"testproblems/","page":"Test Problems","title":"Test Problems","text":"The following exemplary test problems are predefined:","category":"page"},{"location":"testproblems/#MeGraPDE.TestProblem244","page":"Test Problems","title":"MeGraPDE.TestProblem244","text":"Heat equation on star graph with eigenfunction phi_5 as initial condition.\n\n\n\n\n\n","category":"constant"},{"location":"testproblems/#MeGraPDE.TestProblem245","page":"Test Problems","title":"MeGraPDE.TestProblem245","text":"Heat equation on diamond graph with eigenfunction phi_3 as initial condition.\n\n\n\n\n\n","category":"constant"},{"location":"testproblems/#MeGraPDE.TestProblem721","page":"Test Problems","title":"MeGraPDE.TestProblem721","text":"Heat equation with Gaussian-type inital condition.\n\n\n\n\n\n","category":"constant"},{"location":"testproblems/#Reaction-Diffusion-Equation","page":"Test Problems","title":"Reaction-Diffusion Equation","text":"","category":"section"},{"location":"testproblems/#MeGraPDE.TPReactionDiffusion","page":"Test Problems","title":"MeGraPDE.TPReactionDiffusion","text":"Test Problem related to Reaction-Diffusion Equation on Γ.\n\nΓ: Metric Graph\nu0: Initial Condition\nreact: reaction term\nu: Exact solution\nu_deriv: Derivative of exact solution\n\n\n\n\n\n","category":"type"},{"location":"plots/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"plots/#MeGraPDE.plot_graph_3d","page":"Plotting","title":"MeGraPDE.plot_graph_3d","text":"plot_graph_3d(Γ::Union{EquilateralMetricGraph,MetricGraph}; save_as=false, set_title=false, color=\"gray\", size=(300,300))\n\nPlot metric graph 'Γ' on 3d-grid.\n\nOptional Arguments\n\nsave_as=false: path to save plot\nset_title=false: optional title on plot\ncolor=\"gray\": color to plot graph\n\n\n\n\n\n","category":"function"},{"location":"plots/#MeGraPDE.plot_function_3d","page":"Plotting","title":"MeGraPDE.plot_function_3d","text":"plot_function_3d(Γ::Union{EquilateralMetricGraph,MetricGraph}, u::Vector{Function}; save_as=false, set_title=false, color_graph=\"gray\", color_func=\"cornflowerblue\", size=(300,300), lw=3)\n\nPlot function 'u' on metric graph 'Γ' on 3d-grid.\n\nOptional Arguments\n\nsave_as=false: path to save plot\nset_title=false: optional title on plot\ncolor_graph=\"gray\": color to plot graph\ncolor_func=\"cornflowerblue\": color to plot function\n\n\n\n\n\n","category":"function"},{"location":"finite_elements/discretization/#Finite-Element-Discretization","page":"Finite Element Discretization","title":"Finite Element Discretization","text":"","category":"section"},{"location":"finite_elements/discretization/#Full-Doc","page":"Finite Element Discretization","title":"Full Doc","text":"","category":"section"},{"location":"finite_elements/discretization/#MeGraPDE.finite_element_solver","page":"Finite Element Discretization","title":"MeGraPDE.finite_element_solver","text":"finite_element_solver(TP::EllipticTestProblem, J::Int; solver = \"backslash\")\n\nSolve elliptic test problem 'TP' using a finite element discretiation with maximum step size 2^(-'J').\n\nThe backslach operator is used as a default solver for the semidiscretized system. Set solver = \"multigrid\" to apply multigrid solver.\n\n\n\n\n\nfinite_element_solver(TP::TPGeneralizedHeat, T::Number, J::Int; solver = \"multigrid\")\n\nSolve generalized heat equation test problem 'TP' at time 'T' using a finite element discretiation with maximum step size 2^(-'J') followed by CN-MGM.\n\n\n\n\n\n","category":"function"},{"location":"finite_elements/discretization/#MeGraPDE.fe_matrices","page":"Finite Element Discretization","title":"MeGraPDE.fe_matrices","text":"fe_matrices(Γ::MetricGraph, h_max::Number; mass_approx = false)\n\nAssemble finite element stiffness and mass matrix.\n\nReturn (stiffness matrix, mass matrix). Set mass_approx = true to use mass matrix approximation via Trapezoidal rule.\n\n\n\n\n\nfe_matrices(Γ::EquilateralMetricGraph, h_max::Number; mass_approx = false)\n\nWhen called for equilateral graphs, apply uniform discretization on each edge.\n\n\n\n\n\n","category":"function"},{"location":"finite_elements/discretization/#MeGraPDE.fe_rhs","page":"Finite Element Discretization","title":"MeGraPDE.fe_rhs","text":"fe_rhs(Γ::MetricGraph, rhs::Vector{Function}, h_max::Number)\n\nReturn discretized right-hand side rhs with maximum step size h_max on each edge.\n\n\n\n\n\nfe_rhs(Γ::EquilateralMetricGraph, rhs::Vector{Function}, h_max::Number)\n\nSimplified version for equilateral graphs.\n\n\n\n\n\n","category":"function"},{"location":"finite_elements/discretization/#MeGraPDE.fe_discretization","page":"Finite Element Discretization","title":"MeGraPDE.fe_discretization","text":"fe_discretization(TP::EllipticTestProblem, J::Int; mass_aprox = false)\n\nCompute finite element discretization of elliptic test problem 'TP' with step size 'J'.\n\n\n\n\n\nfe_discretization(TP::TPGeneralizedHeat, J::Int; mass_aprox = false)\n\nCompute finite element discretization of generalized heat equation 'TP' with step size 2^(-'J').\n\n\n\n\n\n","category":"function"},{"location":"finite_elements/discretization/#MeGraPDE.fe_error","page":"Finite Element Discretization","title":"MeGraPDE.fe_error","text":"fe_error(Γ::MetricGraph, u_fe::Vector, u::Vector{Function}, u_deriv::Vector{Function}, Nx_vec::Vector)\n\nCompute L2 and H^1 error of the finite element solution with coefficients ufe with respect to exact solution u with derivative u_deriv.\n\n\n\n\n\nfe_error(Γ::EquilateralMetricGraph, u_fe::Vector, u::Vector{Function}, u_deriv::Vector{Function})\n\nEquilateral version.\n\n\n\n\n\nfe_error(TP::EllipticTestProblem, u_fe::Vector)\n\nCompute L2 and H^1 error of the finite element solution with coefficients 'ufe' with respect to exact solution 'TP.u' with derivative 'TP.u_deriv'.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/constructors/#Constructors","page":"Constructors","title":"Constructors","text":"","category":"section"},{"location":"metricgraphs/constructors/","page":"Constructors","title":"Constructors","text":"Various example graphs, where possible with vertex coordinates, can be constructed by predefined functions.","category":"page"},{"location":"metricgraphs/constructors/#Full-Doc","page":"Constructors","title":"Full Doc","text":"","category":"section"},{"location":"metricgraphs/constructors/#MeGraPDE.MetricGraphs.metric_tree_graph","page":"Constructors","title":"MeGraPDE.MetricGraphs.metric_tree_graph","text":"metric_tree_graph(; ℓ=1)\n\nCreate a tree graph with n=16 vertices and m=15 edges of lengths 'ℓ'.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/constructors/#MeGraPDE.MetricGraphs.metric_graphene_graph","page":"Constructors","title":"MeGraPDE.MetricGraphs.metric_graphene_graph","text":"metric_graphene_graph(; ℓ=1)\n\nCreate a graphene graph with n=12 vertices and m=13 edges of lengths 'ℓ'.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/constructors/#MeGraPDE.MetricGraphs.metric_star_graph","page":"Constructors","title":"MeGraPDE.MetricGraphs.metric_star_graph","text":"metric_star_graph(; ℓ=1)\n\nCreate a star graph with n=5 vertices and m=4 edges of lengths 'ℓ'.\n\n\n\n\n\nmetric_star_graph(ℓ_vec::Vector)\n\nCreate a star graph with edge lengths 'ℓ_vec'.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/constructors/#MeGraPDE.MetricGraphs.metric_diamond_graph","page":"Constructors","title":"MeGraPDE.MetricGraphs.metric_diamond_graph","text":"metric_diamond_graph(; ℓ=1)\n\nCreate a diamond graph with n=4 vertices and m=5 edges of lengths 'ℓ'.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/constructors/#MeGraPDE.MetricGraphs.metric_lollipop_graph","page":"Constructors","title":"MeGraPDE.MetricGraphs.metric_lollipop_graph","text":"metric_lollipop_graph(n1::Int, n2::Int; ℓ=1)\n\nCreate a lollipop graph with clique of size 'n1' connected by an edge to a path of size 'n2', equilateral edge lengths 'ℓ'.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/constructors/#MeGraPDE.MetricGraphs.metric_barabasi_albert","page":"Constructors","title":"MeGraPDE.MetricGraphs.metric_barabasi_albert","text":"metric_barabasi_albert(n::Int, k::Int; ℓ=1, seed=nothing)\n\nCreate Barbási-Albert graph with 'n' vertices by growing an initial graph with 'k' vertices and attaching each vertex with 'k' edges, see Graphs.barabasi_albert.\n\nOptional Arguments\n\nℓ: specify equilateral edge length, vector with edge length or \":non_equi\" for random edge length\nseed=nothing: set the RNG seed.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/constructors/#MeGraPDE.MetricGraphs.metric_erdos_renyi","page":"Constructors","title":"MeGraPDE.MetricGraphs.metric_erdos_renyi","text":"metric_erdos_renyi(n::Int, p::Number; ℓ=1)\n\nCreate equilateral Erdos-Renyi graph with 'n' vertices connected by edges with probability 'p', see Graphs.erdos_renyi.\n\n\n\n\n\n","category":"function"},{"location":"spectra/non_equilateral/#Non-Equilateral-Graphs","page":"Non-Equilateral Graphs","title":"Non-Equilateral Graphs","text":"","category":"section"},{"location":"spectra/non_equilateral/#Full-Doc","page":"Non-Equilateral Graphs","title":"Full Doc","text":"","category":"section"},{"location":"spectra/non_equilateral/#MeGraPDE.QuantumGraphSpectra.equilateral_floor_approximation","page":"Non-Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.equilateral_floor_approximation","text":"equilateral_floor_approximation(Γ::MetricGraph, h::Number)\n\nCompute equilateral floor approximation of 'Γ' with equilateral edge length 'h'\n\n\n\n\n\n","category":"function"},{"location":"spectra/non_equilateral/#MeGraPDE.QuantumGraphSpectra.equilateral_ceil_approximation","page":"Non-Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.equilateral_ceil_approximation","text":"equilateral_ceil_approximation(Γ::MetricGraph, h::Number)\n\nCompute equilateral ceil approximation of 'Γ' with equilateral edge length 'h'\n\n\n\n\n\n","category":"function"},{"location":"spectra/non_equilateral/#MeGraPDE.QuantumGraphSpectra.eigvals_equilateral_representation","page":"Non-Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.eigvals_equilateral_representation","text":"eigvals_equilateral_representation(Γ::MetricGraph, h::Number)\n\nCompute the exact eigenvalues of 'Γ' by an equilateral representation with edge length 'h'\n\n\n\n\n\n","category":"function"},{"location":"spectra/non_equilateral/#MeGraPDE.QuantumGraphSpectra.approx_lowest_level","page":"Non-Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.approx_lowest_level","text":"approx_lowest_level(Γ::MetricGraph, h_min::Number; Q=2)\n\nCompute eigenvalue approximations by equilateral ceil and floor approximations of the first 'Q' eigenvalues at the lowest discretization level 'h_min' in the nested iteration.\n\n\n\n\n\n","category":"function"},{"location":"spectra/non_equilateral/#MeGraPDE.QuantumGraphSpectra.nested_iteration_eigenvalue_approximation","page":"Non-Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.nested_iteration_eigenvalue_approximation","text":"nested_iteration_eigenvalue_approximation(Γ::MetricGraph; lev_zero=0, lev_max=7, Q=2, save_each_lev=false)\n\nApproximate first 'Q' eigenvalues of 'Γ' via equilateral approximations using a nested itertation approach.\n\n\n\n\n\n","category":"function"},{"location":"spectra/non_equilateral/#MeGraPDE.QuantumGraphSpectra.H_matrix","page":"Non-Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.H_matrix","text":"H_matrix(z::Number, Γ::MetricGraph)\n\nCompute H(z) for a metric graph 'Γ'.\n\n\n\n\n\nH_matrix(z::Number, bfN::SparseMatrixCSC, ℓ_vec::Vector)\n\nCompute H(z) for a graph with incidence matrix 'Inc' and edge length 'ℓ_vec'.\n\n\n\n\n\n","category":"function"},{"location":"spectra/non_equilateral/#MeGraPDE.QuantumGraphSpectra.newton_trace","page":"Non-Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.newton_trace","text":"newton_trace(Γ::MetricGraph, z_start::Number)\n\nNewton-trace iteration to determine roots of det(H(z)).\n\n\n\n\n\n","category":"function"},{"location":"spectra/non_equilateral/#MeGraPDE.QuantumGraphSpectra.nested_iteration_newton_trace","page":"Non-Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.nested_iteration_newton_trace","text":"nested_iteration_newton_trace(Γ::MetricGraph; lev_zero=0, lev_max=7, Q=5, save_each_lev=false, return_eigvecs=false)\n\nConduct nested iteration newton trace algorithm to find the first 'Q' eigenvalues of 'Γ'.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/basicusage/#Base","page":"Base","title":"Base","text":"","category":"section"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"The abstract type AbstractMetricGraph comprises the following two types representing non-equilateral and equilateral metric graphs.","category":"page"},{"location":"metricgraphs/basicusage/#MeGraPDE.MetricGraphs.MetricGraph","page":"Base","title":"MeGraPDE.MetricGraphs.MetricGraph","text":"A type representing a Metric Graph (non-equilateral)\n\nG: Simple combinatorial graph\nℓ_vec: Vector containing the edge lengths\ncoords: Array containing the coordinates of the vertices; specify 'nothing' if no coordinates available\n\n\n\n\n\n","category":"type"},{"location":"metricgraphs/basicusage/#MeGraPDE.MetricGraphs.EquilateralMetricGraph","page":"Base","title":"MeGraPDE.MetricGraphs.EquilateralMetricGraph","text":"A type representing a Metric Graph with equilateral edge lengths\n\nG: Simple combinatorial graph\nℓ: Equilateral edge length\ncoords: Array containing the coordinates of the vertices; specify 'nothing' if no coordinates available\n\n\n\n\n\n","category":"type"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"In the field 'coords', coordinates can be specified that allow plotting the graph in a 3d grid.","category":"page"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"The function metric_graph assembles a metric graph by specifying a combinatorial graph G and edge lengths. Coordinates can be set optionally, but are false per default.","category":"page"},{"location":"metricgraphs/basicusage/#MeGraPDE.MetricGraphs.metric_graph","page":"Base","title":"MeGraPDE.MetricGraphs.metric_graph","text":"metric_graph(G::SimpleGraph, ℓ_vec::Vector; vertex_coords=nothing)\n\nCreate metric graph from simple graph 'G' with edge lengths 'ℓ_vec' and optionally assign a coordinate specified in 'coord' to the vertices.\n\n\n\n\n\nmetric_graph(G::SimpleGraph, ℓ::Number; vertex_coords=nothing)\n\nEquilateral version with one uniform edge length 'ℓ' assigned to each edge.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"It is possible to extended every possible graph to a metric graph by assigning edge length.","category":"page"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"Consider for example the Barabasi-Albert graph constructed with [Graphs.jl](https://github.com/JuliaGraphs/Graphs.","category":"page"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"using Graphs\nG = barabasi_albert(100, 3)","category":"page"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"You can now either assign an equilateral edge length represented by one number or a vector l_vec with edge lengths to create a metric graph","category":"page"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Graphs #hide\nG = barabasi_albert(100, 3) #hide\nℓ = 1\nΓ = metric_graph(G, ℓ)","category":"page"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Graphs #hide\nG = barabasi_albert(100, 3) #hide\nℓ_vec = rand(1:5, ne(G))\nΓ = metric_graph(G, ℓ_vec)","category":"page"},{"location":"metricgraphs/basicusage/","page":"Base","title":"Base","text":"Some minor functions are implemented to quickly access properties of Γ. This list is by far not complete and will be expanded by other frequently used functions.","category":"page"},{"location":"metricgraphs/basicusage/#MeGraPDE.MetricGraphs.edge_length","page":"Base","title":"MeGraPDE.MetricGraphs.edge_length","text":"edge_length(Γ::MetricGraph, j::Int)\n\nReturn edge length of edge 'j.'\n\n\n\n\n\nedge_length(Γ::EquilateralMetricGraph)\n\nEquilateral version.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/basicusage/#MeGraPDE.MetricGraphs.vol","page":"Base","title":"MeGraPDE.MetricGraphs.vol","text":"vol(Γ::MetricGraph)\n\nReturn volume vol_Gamma = sum_e in mathcalE ell_e.\n\n\n\n\n\nvol(Γ::EquilateralMetricGraph)\n\nEquilateral version, vol = m cdot ell.\n\n\n\n\n\n","category":"function"},{"location":"gettingstarted/metricgraphs/#Your-first-metric-graph","page":"Your first metric graph","title":"Your first metric graph","text":"","category":"section"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"Before you start, go to the installation section and activate MeGraPDE in the current session with the command","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"using MeGraPDE","category":"page"},{"location":"gettingstarted/metricgraphs/#Creating-a-metric-graph","page":"Your first metric graph","title":"Creating a metric graph","text":"","category":"section"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"Let us first create a combinatorial star graph G with 5 vertices and 4 edges using Graphs.jl","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"using Graphs\nG = star_graph(5)","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"In order to extend G to an equilateral metric graph, we define the edge length ℓ","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"ℓ = pi + pi/2","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"G can now be represented as metric graph Γ by applying the function metric_graph","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Graphs # hide\nG = star_graph(5) # hide\nℓ = pi + pi/2 #hide\nΓ = metric_graph(G, ℓ)","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"For a small example like the star graph, vertex coordinates can be assigned that will later allow to visualize Γ in 3d.","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Graphs # hide\nG = star_graph(5) # hide\nℓ = pi + pi/2 #hide\ncoords = [[0, 0], [ℓ, 0], [-ℓ, 0], [0, ℓ], [0, -ℓ]]","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"The function metric_graph takes the optional input vertex_coords to specify the vertex coordinates.","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Graphs # hide\nG = star_graph(5) # hide\nℓ = pi + pi/2 #hide\ncoords = [\n    [0, 0], #hide\n    [ℓ, 0], #hide\n    [-ℓ, 0], #hide\n    [0, ℓ], #hide\n    [0, -ℓ],\n] # hide\nΓ = metric_graph(G, ℓ; vertex_coords=coords)","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"We may now plot Γ using plot_graph_3d","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Plots # hide\nΓ = metric_star_graph() # hide\nplot_graph_3d(Γ)","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"note: Note\n","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"The previous example graph can be assembled using the constructor metric_star_graph and indicating the desired edge length as metric_star_graph(ℓ = pi + pi/2). Several other example graphs are implemented.","category":"page"},{"location":"gettingstarted/metricgraphs/#Functions-on-metric-graphs","page":"Your first metric graph","title":"Functions on metric graphs","text":"","category":"section"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"A function u on a metric graph is represented by a vector of functions u_e, specifying u on each edge e.","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"u = [x -> -3*sin(x), x -> sin(x), x -> sin(x), x -> sin(x)]","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"If vertex coordinates are assigned to Γ, a function can be plotted on Γ with","category":"page"},{"location":"gettingstarted/metricgraphs/","page":"Your first metric graph","title":"Your first metric graph","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Graphs # hide\nG = star_graph(5) # hide\nℓ = pi + pi/2 #hide\ncoords = [\n    [0, 0], #hide\n    [ℓ, 0], #hide\n    [-ℓ, 0], #hide\n    [0, ℓ], #hide\n    [0, -ℓ],\n] # hide\nΓ = metric_graph(G, ℓ; vertex_coords=coords) # hide\nu = [\n    x -> -3*sin(x), # hide\n    x -> sin(x),  # hide\n    x -> sin(x), # hide\n    x -> sin(x), # hide\n] # hide\nplot_function_3d(Γ, u)","category":"page"},{"location":"gettingstarted/heat/#Heat-Equation","page":"Heat Equation","title":"Heat Equation","text":"","category":"section"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"Finally, the initial boundary value problem for the heat equation","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"fracpartialpartial t u(xt) + fracpartial^2partial u^2 u(xt) = 0 quad (ast)","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"on a metric graph Γ under Neumann-Kirchhoff conditions is approximated.","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"Consider a lollipop graph that can be constructed using the predefined method metric_lollipop_graph","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nΓ = metric_lollipop_graph()\nplot_graph_3d(Γ)","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"As initial condition, we choose a model initial condition that has compact support on randomly chosen, edge of Γ and is zero elsewhere. A routine to assemble this initial condition is implemented in","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nΓ = metric_lollipop_graph() # hide\nu0 = model_initial_condition(Γ)","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"The solution of (ast) can be simulated for t in 0T by calling","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nΓ = metric_lollipop_graph() # hide\nu0 = model_initial_condition(Γ) # hide\nT = 1\nanimate_diffusion(Γ, u0, T)","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"Lets go for fractional diffusion on a tree!","category":"page"},{"location":"gettingstarted/heat/","page":"Heat Equation","title":"Heat Equation","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nΓ = metric_tree_graph()\nu0 = model_initial_condition(Γ)\nT = 3\nanimate_diffusion(Γ, u0, T; α=0.1)","category":"page"},{"location":"metricgraphs/extendedgraph/#Extended-Graph","page":"Extended Graph","title":"Extended Graph","text":"","category":"section"},{"location":"metricgraphs/extendedgraph/#MeGraPDE.MetricGraphs.discretize_function","page":"Extended Graph","title":"MeGraPDE.MetricGraphs.discretize_function","text":"discretize_function(Γ::MetricGraph, u::Vector{Function}, h_max::Number)\n\nReturn discretized version of 'u' on the extended graph of 'Γ' with step size 'h_max' on the edges.\n\n\n\n\n\ndiscretize_function(Γ::MetricGraph, u::Vector{Function}, Nx_vec::Vector)\n\nReturn discretized version of 'u' on the extended graph of 'Γ' with inner grid points in 'Nx_vec'.\n\n\n\n\n\ndiscretize_function(Γ::EquilateralMetricGraph, u::Vector{Function}, h_max::Number)\n\nEquilateral version.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/extendedgraph/#MeGraPDE.MetricGraphs.extended_incidence_matrix","page":"Extended Graph","title":"MeGraPDE.MetricGraphs.extended_incidence_matrix","text":"extended_incidence_matrix(Γ::MetricGraph, h_max::Number)\n\nReturn extended incidence matrix of 'Γ' with maximal step length 'h_max' per edge.\n\nConstruction of incidence matrix via kron-products according to (AB) (section 4.1), see also (W), section 3.1 for a summary.\n\n\n\n\n\nextended_incidence_matrix(Γ::EquilateralMetricGraph, h_max::Number)\n\nEquilateral version with some simplifications.\n\n\n\n\n\n","category":"function"},{"location":"metricgraphs/extendedgraph/#MeGraPDE.MetricGraphs.extended_laplacian","page":"Extended Graph","title":"MeGraPDE.MetricGraphs.extended_laplacian","text":"extended_laplacian(Γ::EquilateralMetricGraph, k::Int)\n\nCompute extended graph Laplacian matrix of 'Γ' with 'k' artificial vertices on each edge.\n\nk inner vertices means each edge is partitioned in k+1 subdivision. The construction of the graph Laplacian relies on the same manipulations of the original graph as in the extendedincidencematrix routine. Here, however, the Laplacian matrix L=NN^T is returned and some simplifications due to the equilateral edge length apply.\n\n\n\n\n\n","category":"function"},{"location":"gettingstarted/spectrum/#...-and-its-spectrum","page":"... and its spectrum","title":"... and its spectrum","text":"","category":"section"},{"location":"gettingstarted/spectrum/","page":"... and its spectrum","title":"... and its spectrum","text":"All eigenvalues lambda  fracK piell^2 of the equilateral graph Gamma can be computed with eigvals_quantum. By default, K=3 is applied.","category":"page"},{"location":"gettingstarted/spectrum/","page":"... and its spectrum","title":"... and its spectrum","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Plots # hide\nΓ = metric_star_graph() # hide\neigvals_quantum(Γ)","category":"page"},{"location":"gettingstarted/spectrum/","page":"... and its spectrum","title":"... and its spectrum","text":"An eigenfunction basis with all eigenfunctions phi_lambda, lambda  fracK piell^2 can be constructed via eigen_quantum","category":"page"},{"location":"gettingstarted/spectrum/","page":"... and its spectrum","title":"... and its spectrum","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Plots # hide\nΓ = metric_star_graph() # hide\nσ = eigen_quantum(Γ)","category":"page"},{"location":"gettingstarted/spectrum/","page":"... and its spectrum","title":"... and its spectrum","text":"Eigenvalues and eigenfunctions are always returned in ascending order. The function  allows to explicitly construct a specific eigenfunction:","category":"page"},{"location":"gettingstarted/spectrum/","page":"... and its spectrum","title":"... and its spectrum","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Plots # hide\nΓ = metric_star_graph() # hide\nσ = eigen_quantum(Γ) # hide\nϕ_q = eigenfunction(Γ, σ, 5)","category":"page"},{"location":"gettingstarted/spectrum/","page":"... and its spectrum","title":"... and its spectrum","text":"It can be vizualized using plot_function_3d","category":"page"},{"location":"gettingstarted/spectrum/","page":"... and its spectrum","title":"... and its spectrum","text":"push!(LOAD_PATH, \"../src/\") # hide\nusing ..MeGraPDE # hide\nusing Plots # hide\nΓ = metric_star_graph() # hide\nσ = eigen_quantum(Γ) # hide\nϕ_q = eigenfunction(Γ, σ, 5) # hide\nplot_function_3d(Γ, ϕ_q)","category":"page"},{"location":"spectra/equilateral/#Equilateral-Graphs","page":"Equilateral Graphs","title":"Equilateral Graphs","text":"","category":"section"},{"location":"spectra/equilateral/#Full-Doc","page":"Equilateral Graphs","title":"Full Doc","text":"","category":"section"},{"location":"spectra/equilateral/#MeGraPDE.QuantumGraphSpectra.eigvals_quantum","page":"Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.eigvals_quantum","text":"eigvals_quantum(Γ::EquilateralMetricGraph; K=3, sorted=true, only_vertex=false)\n\nCompute all eigenvalues lambda  (K pi) ell)^2 of the equilateral metric graph 'Γ'.\n\n\n\n\n\n","category":"function"},{"location":"spectra/equilateral/#MeGraPDE.QuantumGraphSpectra.eigen_quantum","page":"Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.eigen_quantum","text":"eigen_quantum(Γ::EquilateralMetricGraph; K=3, sorted=true, sparse_svd=false)\n\nCompute all eigenvalues lambda  (K pi) ell)^2 and corresponding eigenfunctions phi with\n\nphi_e = A_e cos(sqrtlambda x) + B_e sin (sqrtlambda x)\n\nof the equilateral metric graph 'Γ'.\n\nThe coefficient A_e, B_e are stored in A = [Ae1,…,Aem]' and B = [Be1,…,Bem]' for each eigenfunction. The coefficients are normalized such that all eigenfunctions fulfill  phi =1.\n\n\n\n\n\n","category":"function"},{"location":"spectra/equilateral/#MeGraPDE.QuantumGraphSpectra.count_eigvals_K","page":"Equilateral Graphs","title":"MeGraPDE.QuantumGraphSpectra.count_eigvals_K","text":"count_eigvals_K(Γ::EquilateralMetricGraph, K::Int)\n\nReturn number of eigenvalues lambda  (K* pi ell)^2.\n\n\n\n\n\n","category":"function"},{"location":"#MeGraPDE","page":"MeGraPDE","title":"MeGraPDE","text":"","category":"section"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"MeGraPDE stands for MetricGraphPDEs and implements numerical methods for the solution of partial differential equations (PDEs) on metric graphs.","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"I have developed the MeGraPDE.jl package in connection with my Ph.D thesis at the University of Cologne [W].","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"Among others, the package includes","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"construction of a variety of exemplary metric graphs and test problems\ndiscretization via extended graphs\nfinite element solver for PDEs on metric graphs, e.g. in combination with a multigrid approach\ncomputation of quantum graph eigenvalues and eigenfunctions\nspectral Galerkin solver for PDEs on metric graphs, e.g. in combination with a filon-quadrature","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"The package relies on the methods from Graphs.jl for combinatorial graphs.","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"The finite element discretization via extended graphs is implemented based on the original work [AB]. The computation of equilateral quantum graph eigenvalues is based on an idea originally proposed by von Below [B]. The remaining methods and the related theory have been derived for [W] and are discussed therein.","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"The package is under continuous development.","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"[W] Anna Weller, Numerical Methods for Parabolic Partial Differential Equations on Metric Graphs, PhD thesis at the University of Cologne, 2024.","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"[AB] Mario Arioli, Michele Benzi, A finite element method for quantum graphs, IMA Journal of Numerical Analysis, Volume 38, Issue 3, July 2018, Pages 1119–1163.","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"[B] Joachim von Below, A characteristic equation associated to an eigenvalue problem on c2-networks. Linear Algebra and its Applications, 71:309–325, 1985.","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"Copyright (c) 2023 Anna Weller (University of Cologne)","category":"page"},{"location":"#Installation","page":"MeGraPDE","title":"Installation","text":"","category":"section"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"The package can be added by specifying the URL to the Git repository. In your julia terminal, enter the following commands","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"julia> Pkg.add(; url=\"https://github.com/AnnaWeller/MeGraPDE.jl\");\nusing Pkg","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"You are all set. The package can now be activated with the command","category":"page"},{"location":"","page":"MeGraPDE","title":"MeGraPDE","text":"using MeGraPDE","category":"page"}]
}
